// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model student {
  id                                  Int            @id @default(autoincrement()) @db.UnsignedInt
  current_mosque_name                 String?        @db.VarChar(255)
  educational_class                   Int?
  first_name                          String?        @db.VarChar(255)
  last_name                           String?        @db.VarChar(255)
  birth_date                          DateTime?      @db.DateTime()
  student_mobile                      String?        @db.VarChar(255)
  school                              String?        @db.VarChar(255)
  in_another_mosque                   Boolean        @default(false)
  other_mosque_names                  String?        @db.VarChar(255) // comma separated
  student_health_status               String?        @db.VarChar(1024)
  special_talent                      String?        @db.VarChar(1024)
  father_name                         String?        @db.VarChar(255)
  father_status                       STATUS         @default(ALIVE)
  father_job                          String?        @db.VarChar(255)
  father_income_level                 String?        @db.VarChar(255)
  father_education_level              String?        @db.VarChar(255)
  father_health_status                String?        @db.VarChar(255)
  father_phone_number                 String?        @db.VarChar(255)
  father_work_number                  String?        @db.VarChar(255)
  mother_name                         String?        @db.VarChar(255)
  mother_status                       STATUS         @default(ALIVE)
  mother_job                          String?        @db.VarChar(255)
  mother_income_level                 String?        @db.VarChar(255)
  mother_education_level              String?        @db.VarChar(255)
  mother_health_status                String?        @db.VarChar(255)
  mother_phone_number                 String?        @db.VarChar(255)
  mother_home_number                  String?        @db.VarChar(255)
  parent_marital_status               MARITAL        @default(MARRIED)
  student_mobile_number               String?        @db.VarChar(255)
  student_home_number                 String?        @db.VarChar(255)
  original_residence_address_area     String?        @db.VarChar(255)
  original_residence_address_street   String?        @db.VarChar(255)
  original_residence_address_building String?        @db.VarChar(255)
  original_residence_address_floor    String?        @db.VarChar(255)
  current_residence_address_area      String?        @db.VarChar(255)
  current_residence_address_street    String?        @db.VarChar(255)
  current_residence_address_building  String?        @db.VarChar(255)
  current_residence_address_floor     String?        @db.VarChar(255)
  preserved_parts                     String?
  parts_tested_by_the_endowments      String?
  image_url                           String?        @db.VarChar(2048)
  groups                              StudentGroup[] // Many-to-many relationship with groups
  created_at                          DateTime       @default(now())
  updated_at                          DateTime?      @updatedAt
}

model teacher {
  id                                 Int            @id @default(autoincrement())
  educational_level                  String? // Nullable fields
  university_name                    String? // Nullable fields
  college_name                       String? // Nullable fields
  first_name                         String? // Nullable fields
  last_name                          String? // Nullable fields
  birth_date                         DateTime? // Nullable fields
  mobile_phone_number                String         @unique // Nullable fields 
  in_another_mosque                  Boolean? // Nullable fields
  other_mosque_names                 String? // Nullable fields
  special_talent                     String? // Nullable fields
  father_name                        String? // Nullable fields
  current_residence_address_area     String? // Nullable fields
  current_residence_address_street   String? // Nullable fields
  current_residence_address_building String? // Nullable fields
  preserved_parts                    Json? // JSON fields
  parts_tested_by_the_endowments     Json? // JSON fields
  image_url                          String? // Nullable fields
  is_mojaz                           Boolean? // Nullable fields
  is_working                         Boolean? // Nullable fields
  job_role                           String? // Nullable fields
  workplace_name                     String? // Nullable fields
  groups                             TeacherGroup[] // Many-to-many relationship with groups
  password                           String
  role                               Role           @default(TEACHER)

  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  @@map("teachers") // Optional: map to a custom table name
}

model Group {
  id               Int      @id @default(autoincrement())
  title            String
  class            Int
  currentTeacherId Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  students  StudentGroup[]
  teachers  TeacherGroup[]
  campaigns GroupCampaigns[]

  @@map("groups") // Optional: map to a custom table name
}

model Campaign {
  id                    Int       @id @default(autoincrement())
  name                  String
  startDate             DateTime  @default(now())
  endDate               DateTime? @default(now())
  assignEndDate         DateTime?
  assignStartDate       DateTime? @default(now())
  isCampaignContinous   Boolean   @default(false)
  limitedStudentsCount  Boolean?
  studentsCount         Int
  assignByLink          Boolean?
  completeCountApproach String    @default("UNLIMIT_ASSIGN")
  days                  String
  timingApproach        String?   @default("hours")
  startTime             DateTime
  endTime               DateTime
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  groups       GroupCampaigns[]
  StudentGroup StudentGroup[]

  @@map("campaigns") // Optional: map to a custom table name
}

// Pivot table for Group-Campaign many-to-many relationship
model GroupCampaigns {
  groupId    Int
  campaignId Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  group    Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  campaign Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@id([groupId, campaignId])
  @@map("GroupCampaigns") // Optional: map to a custom table name
}

// Pivot table for Student-Group many-to-many relationship
model StudentGroup {
  studentId  Int      @db.UnsignedInt // Updated to match student.id's type
  groupId    Int
  campaignId Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  student  student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  group    Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  campaign Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@id([studentId, groupId, campaignId])
}

// Pivot table for Teacher-Group many-to-many relationship
model TeacherGroup {
  teacherId  Int
  groupId    Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  teacher teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  group   Group   @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@id([teacherId, groupId])
}

enum STATUS {
  ALIVE
  DEAD
  MISSED
}

enum MARITAL {
  MARRIED
  SEPARATED
  DIVORCED
}

enum Role {
  TEACHER
  MANAGER
  ADMIN
  SUPER_ADMIN
  MANAGER_ASSISTANT
  AUDIBLE
  AUDIBLE_ASSISTANT
}
